// PDXIII_foontBook.jsx// written by fabiantheblind// http://www.the-moron.net// open the fontBookBasic.idmlbuildDoc();makeLabeldTextFrames();fontBook();function fontBook() {	try{		var doc = app.activeDocument;			var test = doc.name;	}catch(e){		alert("Open the \"fontBookBasic.idml\" file and try again");		exit();	}		var pg = doc.pages.item(0);	var source;	// iterate thru all textFrames on the page and check for the "source" scriptLabel	for(var i = 0; i < pg.textFrames.length; i++){	    if(pg.textFrames.item(i).label.match("source")){	        // found something. so get the content string	        source = pg.textFrames.item(i).contents;			// and set the textframe to nonprinting	        pg.textFrames.item(i).nonprinting = true;	    }	}	// this seems unneccessary	// put all the target textframes in an array	//var targets = new Array();	//for (var j = 0; j < pg.textFrames.length;j++ ){	//        if(pg.textFrames.item(j).label.match("target")){	//    targets[j] = pg.textFrames.item(j).contents;	//    }	//}	// create duplicates from first page for all characters	for (var k = 0; k< source.length-1; k++){	    pg.duplicate();	    }	// now loop over every page of the document	for (var l = 0; l< doc.pages.length; l++){	    var p = doc.pages.item(l);	    // and over every textframe of the page	    for (var m = 0; m < p.textFrames.length;m++ ){	        if(p.textFrames.item(m).label.match("target")){			// add the coresponding character into the target textframes	        p.textFrames.item(m).contents = source[l];	        }	    }	}	// we are done	}// make the labeld textframesfunction makeLabeldTextFrames(){	var doc = app.activeDocument;	var p = doc.pages.item(0);	var sourceTF = p.textFrames.add();	sourceTF.geometricBounds = getBounds(doc,p);	sourceTF.contents = "Open the Skriptlabel Window.\nYou see that i am the \"source\". Every character of me (including whitespaces) will be placed in the \"target\" frames below.";	sourceTF.fit(FitOptions.FRAME_TO_CONTENT);	sourceTF.label = "source";	var targetTF  = p.textFrames.add();	targetTF.geometricBounds = getBounds(doc,p);		var pw = doc.documentPreferences.pageWidth;	var ph = doc.documentPreferences.pageHeight;	var s;	if(ph > pw){		s = pw / 3;	}else{		s = ph / 3;	}	y1 = (ph/2) - (s/2);	x1 = (pw/2) - (s/2);	y2 = y1 + s;	x2 = x1 + s;		targetTF.geometricBounds  = [y1,x1,y2,x2];	targetTF.contents = "I am a target. I will be cleard and contain the single characters";//	targetTF.fit(FitOptions.FRAME_TO_CONTENT);	targetTF.label = "target";	for(var i = 0; i< targetTF.characters.length; i++){		targetTF.characters.item(i).pointSize = 23;		targetTF.paragraphs.item(0).justification = Justification.CENTER_ALIGN;			}}function buildDoc(){	var theDoc = app.documents.add()	with (theDoc.documentPreferences) {		pageWidth = "210mm";		pageHeight = "210mm";		//BleedBox settings		documentBleedBottomOffset = "3mm";		documentBleedTopOffset = "3mm";		documentBleedInsideOrLeftOffset = "3mm";		documentBleedOutsideOrRightOffset = "3mm";	}	// have to look up why the size is declared in 2 ways		with (theDoc.viewPreferences) {		pageWidth = "210mm";		pageHeight = "210mm";		// to make shure we have the right positions and units		horizontalMeasurementUnits = MeasurementUnits.MILLIMETERS;		verticalMeasurementUnits = MeasurementUnits.MILLIMETERS;		rulerOrigin = RulerOrigin.pageOrigin;			}		with(theDoc.masterSpreads.item(0).pages.item(0).marginPreferences){		left = "13mm";		top = "23mm";		right = "13mm";		bottom = "23mm";		columnCount = 3;		columnGutter = "4mm";	}	with(theDoc.masterSpreads.item(0).pages.item(1).marginPreferences){		left = "13mm";		top = "23mm";		right = "13mm";		bottom = "23mm";		columnCount = 3;		columnGutter = "4mm";	}			return theDoc;}function getBounds(myDocument, myPage){	var myPageWidth = myDocument.documentPreferences.pageWidth;	var myPageHeight = myDocument.documentPreferences.pageHeight	if(myPage.side == PageSideOptions.leftHand){		var myX2 = myPage.marginPreferences.left;		var myX1 = myPage.marginPreferences.right;	}	else{		var myX1 = myPage.marginPreferences.left;		var myX2 = myPage.marginPreferences.right;	}	var myY1 = myPage.marginPreferences.top;	var myX2 = myPageWidth - myX2;	var myY2 = myPageHeight - myPage.marginPreferences.bottom;	return [myY1, myX1, myY2, myX2];}